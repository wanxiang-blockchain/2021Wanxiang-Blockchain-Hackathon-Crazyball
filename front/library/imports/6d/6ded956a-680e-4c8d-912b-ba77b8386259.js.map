{"version":3,"sources":["assets/src/common/audio/AudioPlayer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { loader_mgr } from \"../loader/loader_mgr\"\nimport * as utils from \"../util\"\nimport SingletonClass from \"../base/SingletonClass\";\nimport { LocalStorage, CONST_STORAGE_KEY } from \"../localStorage/LocalStorage\";\n\nconst MUSIC_PATH = \"sound/{0}\";\nconst SOUND_PATH = \"sound/{0}\";\n\nexport class AudioPlayer extends SingletonClass {\n    private clip_cache: Map<string, cc.AudioClip> = new Map();\n    private loading_map: Map<string, boolean> = new Map();\n\n    private curr_music: string;\n    private music_id: number = -1;\n    private music_volume: number = 0.5;\n    private music_mute: boolean = false;\n\n    private sound_ids: number[] = [];\n    private sound_volume: number = 1;\n    private sound_mute: boolean = false;\n\n\n    static ins() {\n        return super.ins() as AudioPlayer;\n    }\n\n    // init() {\n    //     this.set_music_mute(LocalStorage.ins().getLocal(CONST_STORAGE_KEY.KEY_MUSIC_IS_MUTE, false));\n    //     this.set_music_volume(LocalStorage.ins().getLocal(CONST_STORAGE_KEY.KEY_MUSIC_VOLUME, 0.5));\n    //     this.set_sound_mute(LocalStorage.ins().getLocal(CONST_STORAGE_KEY.KEY_SOUND_IS_MUTE, false));\n    //     this.set_sound_volume(LocalStorage.ins().getLocal(CONST_STORAGE_KEY.KEY_SOUND_VOLUME, 1));\n    // }\n\n    flush() {\n        // wxapi.wxStorage.set(Consts.Game.SoundMute, this.sound_mute ? \"1\" : \"0\");\n    }\n\n    //同时只能播放一个\n    play_music(name: string) {\n        if (this.music_id >= 0) {\n            this.stop_music();\n        }\n\n        let path = utils.strfmt(MUSIC_PATH, name);\n        this.curr_music = name;\n\n        if (this.music_mute) {\n            // cc.log(\"music is mute\");\n            return;\n        }\n        let clip = this.clip_cache.get(path);\n        if (clip) {\n            this.play_clip(clip, this.music_volume, true, AudioType.Music);\n        }\n        else {\n            let task: AudioPlayTask = { type: AudioType.Music, name: name, path: path, volume: this.music_volume, loop: true };\n            this.load_task(task);\n        }\n    }\n\n    stop_music() {\n        if (this.music_id < 0) {\n            // cc.log(\"no music is playing\");\n            return;\n        }\n        cc.audioEngine.stop(this.music_id);\n        this.music_id = -1;\n    }\n\n    get_music_mute() {\n        return this.music_mute;\n    }\n\n    set_music_mute(is_mute: boolean) {\n        this.music_mute = is_mute;\n        LocalStorage.ins().setLocal(CONST_STORAGE_KEY.KEY_MUSIC_IS_MUTE, is_mute);\n\n        if (this.music_id < 0) {\n            if (!is_mute && this.curr_music) {\n                this.play_music(this.curr_music);\n            }\n            return;\n        }\n        if (is_mute) {\n            cc.audioEngine.pause(this.music_id);\n        }\n        else {\n            cc.audioEngine.resume(this.music_id);\n        }\n    }\n\n    //0~1\n    set_music_volume(volume: number) {\n        this.music_volume = volume;\n        if (this.music_id >= 0) {\n            cc.audioEngine.setVolume(this.music_id, volume);\n        }\n        LocalStorage.ins().setLocal(CONST_STORAGE_KEY.KEY_MUSIC_VOLUME, volume);\n    }\n\n    private load_task(task: AudioPlayTask) {\n        let path = task.path;\n        if (this.loading_map.get(path)) {\n            return;\n        }\n        this.loading_map.set(path, true);\n        loader_mgr.get_inst().loadRawAsset(path, utils.gen_handler(this.on_clip_loaded, this, task));\n    }\n\n    private on_clip_loaded(task: AudioPlayTask, clip: cc.AudioClip) {\n        this.clip_cache.set(task.path, clip);\n        if (task.type == AudioType.Music && task.name != this.curr_music) {\n            return;\n        }\n        this.play_clip(clip, task.volume, task.loop, task.type, task.cb);\n    }\n\n    private play_clip(clip, volume: number, loop: boolean, type: AudioType, cb?: utils.handler) {\n        let aid = cc.audioEngine.play(clip, loop, volume);\n        if (type == AudioType.Music) {\n            this.music_id = aid;\n        }\n        else if (type == AudioType.Sound) {\n            this.sound_ids.push(aid);\n            cc.audioEngine.setFinishCallback(aid, () => {\n                this.on_sound_finished(aid);\n                cb && cb.exec();\n            });\n        }\n    }\n\n    private on_sound_finished(aid: number) {\n        let idx = this.sound_ids.findIndex((id) => {\n            return id == aid;\n        });\n        if (idx != -1) {\n            this.sound_ids.splice(idx, 1);\n        }\n    }\n\n    //可同时播放多个\n    play_sound(name: string, cb?: utils.handler) {\n        if (this.sound_mute) {\n            // cc.log(\"sound is mute\");\n            return;\n        }\n        let path = utils.strfmt(SOUND_PATH, name);\n        let clip = this.clip_cache.get(path);\n        if (clip) {\n            this.play_clip(clip, this.sound_volume, false, AudioType.Sound, cb);\n        } else {\n            let task: AudioPlayTask = { type: AudioType.Sound, name: name, path: path, volume: this.sound_volume, loop: false, cb };\n            this.load_task(task);\n        }\n    }\n\n    get_sound_mute() {\n        return this.sound_mute;\n    }\n\n    set_sound_mute(is_mute: boolean) {\n        this.sound_mute = is_mute;\n        this.sound_ids.forEach((sid) => {\n            if (is_mute) {\n                cc.audioEngine.pause(sid);\n            } else {\n                cc.audioEngine.resume(sid);\n            }\n        });\n        LocalStorage.ins().setLocal(CONST_STORAGE_KEY.KEY_SOUND_IS_MUTE, is_mute);\n    }\n\n    //0~1\n    set_sound_volume(volume: number) {\n        this.sound_volume = volume;\n        this.sound_ids.forEach((sid) => {\n            cc.audioEngine.setVolume(sid, volume);\n        });\n        LocalStorage.ins().setLocal(CONST_STORAGE_KEY.KEY_SOUND_VOLUME, volume);\n    }\n\n    stop_sound() {\n        this.sound_ids.forEach((sid) => {\n            cc.audioEngine.stop(sid);\n        });\n        this.sound_ids.length = 0;\n    }\n\n    clear_cache() {\n        this.clip_cache.forEach((clip, key) => {\n            loader_mgr.get_inst().release(clip);\n        });\n        this.clip_cache.clear();\n        this.loading_map.clear();\n        cc.audioEngine.uncacheAll();\n    }\n}\n\nenum AudioType {\n    Music = 1,\n    Sound = 2,\n}\n\ninterface AudioPlayTask {\n    type: AudioType;\n    name: string;\n    path: string;\n    volume: number;\n    loop: boolean;\n    cb?: utils.handler;\n}\n\nexport const AUDIO_CONFIG = {\n    Audio_Btn: \"button\",\n    Audio_levelup: \"levelup\",\n    Audio_star: \"star\",\n    Audio_balls: \"balls\",\n    Audio_Bgm: \"bg\",\n    Audio_gameover: \"gameover\",\n    Audio_win: \"win\",\n    Audio_congra: \"congra\",\n\n}"]}