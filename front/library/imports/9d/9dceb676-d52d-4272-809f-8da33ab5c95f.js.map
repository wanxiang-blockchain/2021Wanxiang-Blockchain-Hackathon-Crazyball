{"version":3,"sources":["assets/src/common/random/RandomUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import SingletonClass from \"../base/SingletonClass\";\n\nexport enum RandomSeedType {\n    UNDEFINED = 0,\n}\n\nexport class RandomUtil extends SingletonClass {\n    public static ins() {\n        return super.ins() as RandomUtil\n    }\n\n    private _seeds: number[][] = []\n    private _seedIndex: number[] = [];\n    private _selectedIndexes: number[][] = []\n    private _randomSeed = '0123456789abcdef'\n\n    public init(randomSeed: string = '0123456789abcdef') {\n        this._randomSeed = randomSeed;\n\n        const keysAll = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        this._seeds = [];\n        this._selectedIndexes = [];\n        this._seedIndex = [];\n        for (const key of keysAll) {\n            this.resetSeed(key)\n        }\n    }\n\n    public resetSeed(randomSeedType: RandomSeedType) {\n        this._seeds[randomSeedType] = []\n        this._selectedIndexes[randomSeedType] = [];\n        this._seedIndex[randomSeedType] = 0;\n\n        for (let i: number = 0; i < this._randomSeed.length; i++) {\n            let fix: number = parseInt(this._randomSeed[i], 36) || 0;\n            fix = (9301 * fix + 49297) % (10485763) || 0;\n            this._seeds[randomSeedType].push(fix)\n        }\n    }\n\n    public randomNum(min: number, max: number, randomSeedType: RandomSeedType = RandomSeedType.UNDEFINED): number {\n        if (min > max)\n            max = min\n        const seedIndex = this._seedIndex[randomSeedType] % this._randomSeed.length\n        const ret = min + (this._seeds[randomSeedType][seedIndex]) % (max - min + 1)\n        this._seeds[randomSeedType][seedIndex] = (9301 * this._seeds[randomSeedType][seedIndex] + 49297) % (10485763) || 0\n        this._seedIndex[randomSeedType]++;\n        this._selectedIndexes[randomSeedType].push(ret)\n        return ret\n    }\n\n    public randomNumArray(min: number, max: number, count: number, randomSeedType: RandomSeedType = RandomSeedType.UNDEFINED): number[] {\n        if (min > max)\n            max = min\n        const ret = []\n        if (max - min + 1 < count) {\n            count = max - min + 1\n        }\n        for (let i = 0; i < count;) {\n            const randomNum = this.randomNum(min, max, randomSeedType)\n            if (ret.indexOf(randomNum) < 0) {\n                ret.push(randomNum)\n                i++;\n            }\n        }\n        return ret\n    }\n\n    /**百分比概率 */\n    public getPercentProbability(percent: number, randomSeedType: RandomSeedType = RandomSeedType.UNDEFINED): boolean {\n        const randomNum = this.randomNum(1, 100, randomSeedType)\n        // egret.log(\"getPercentProbability\", percent, randomNum)\n        return (percent >= randomNum)\n    }\n\n}"]}