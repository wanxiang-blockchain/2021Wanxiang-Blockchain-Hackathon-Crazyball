{"version":3,"sources":["assets/src/common/linklist.ts"],"names":[],"mappings":";;;;;;;AAMA;IAMI;QAEI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAEO,6BAAU,GAAlB,UAAmB,GAAU,EAAE,IAAM;QAEjC,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3C,IAAG,IAAI,EACP;YACI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB;aAED;YACI,IAAI,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,IAAI,EAAC,IAAI,EAAE,IAAI,EAAC,IAAI,EAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAI,0BAAI;aAAR;YAEI,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAED,sBAAI,0BAAI;aAAR;YAEI,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAED,yBAAM,GAAN,UAAO,GAAU,EAAE,IAAM;QAErB,IAAI,IAAI,GAAmB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACtD,mBAAmB;QACnB,IAAG,IAAI,CAAC,KAAK,EACb;YACI,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACrB;aAED;YACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,yBAAM,GAAN,UAAO,GAAU;QAEb,IAAG,CAAC,GAAG,EACP;YACI,OAAO,IAAI,CAAC;SACf;QACD,IAAG,CAAC,IAAI,CAAC,KAAK,EACd;YACI,OAAO,IAAI,CAAC;SACf;QACD,IAAI,IAAoB,CAAC;QACzB,IAAI,IAAI,GAAmB,IAAI,CAAC,KAAK,CAAC;QACtC,OAAM,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,EAC7B;YACI,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,KAAK;QACL,IAAG,CAAC,IAAI,EACR;YACI,OAAO,IAAI,CAAC;SACf;QACD,IAAG,CAAC,IAAI,EACR;YACI,2BAA2B;YAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAG,CAAC,IAAI,CAAC,IAAI,EACb;gBACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;aACrB;SACJ;aAED;YACI,yBAAyB;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACtB,IAAG,CAAC,IAAI,CAAC,IAAI,EACb;gBACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;aACrB;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,eAAC;AAAD,CAjGA,AAiGC,IAAA;AAjGY,4BAAQ","file":"","sourceRoot":"/","sourcesContent":["export type LinkListNode<T> = {\n    key:number;\n    data:T;\n    next:LinkListNode<T>;\n}\n\nexport class LinkList<T>\n{\n    private pool:LinkListNode<T>[];\n    private _head:LinkListNode<T>;\n    private _tail:LinkListNode<T>;\n\n    constructor()\n    {\n        this._head = this._tail = null;\n        this.pool = [];\n    }\n\n    private spawn_node(key:number, data:T):LinkListNode<T>\n    {\n        let node:LinkListNode<T> = this.pool.pop();\n        if(node)\n        {\n            node.key = key;\n            node.data = data;\n            node.next = null;\n        }\n        else\n        {\n            node = {key:key, data:data, next:null};\n        }\n        return node;\n    }\n    \n    get head():LinkListNode<T>\n    {\n        return this._head;\n    }\n\n    get tail():LinkListNode<T>\n    {\n        return this._tail;\n    }\n\n    append(key:number, data:T):number\n    {\n        let node:LinkListNode<T> = this.spawn_node(key, data);\n        //将node加到linklist末尾\n        if(this._tail)\n        {\n            this._tail.next = node;\n            this._tail = node;\n        }\n        else\n        {\n            this._head = this._tail = node;\n        }\n        return node.key;\n    }\n\n    remove(key:number):LinkListNode<T>\n    {\n        if(!key)\n        {\n            return null;\n        }\n        if(!this._head)\n        {\n            return null;\n        }\n        let prev:LinkListNode<T>;\n        let curr:LinkListNode<T> = this._head;\n        while(curr && curr.key != key)\n        {\n            prev = curr;\n            curr = curr.next;\n        }\n        //没找到\n        if(!curr)\n        {\n            return null;\n        }\n        if(!prev)\n        {\n            //curr为头节点(要区分curr是否同时为尾节点)\n            this._head = curr.next;\n            if(!curr.next)\n            {\n                this._tail = null;\n            }\n        }\n        else\n        {\n            //curr非头节点(要区分curr是否为尾节点)\n            prev.next = curr.next;\n            if(!curr.next)\n            {\n                this._tail = prev;\n            }\n        }\n        this.pool.push(curr);\n        return curr;\n    }\n}"]}