{"version":3,"sources":["assets/src/common/pool/ui_pool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["//lru(last recently used) cache\nexport class ui_pool {\n    private cache: any; //path => cc.Node[]\n    private path2time: any;\n    private size: number;\n    private max_size: number = 2;\n\n    constructor() {\n        this.cache = {};\n        this.path2time = {};\n        this.size = 0;\n    }\n\n    get(path: string): cc.Node {\n        let uis: cc.Node[] = this.cache[path];\n        if (uis && uis.length > 0) {\n            this.size--;\n            return uis.pop();\n        }\n        return null;\n    }\n\n    put(path: string, ui: cc.Node): void {\n        if (this.size >= this.max_size) {\n            //删除最早的缓存\n            let del_path: string;\n            let ts: number = cc.sys.now();\n            for (let p in this.cache) {\n                if (this.cache[p].length > 0 && this.path2time[p] < ts) {\n                    ts = this.path2time[p];\n                    del_path = p;\n                }\n            }\n            if (del_path && del_path != \"\") {\n                let del_ui: cc.Node = this.cache[del_path].pop();\n                del_ui.destroy();\n                this.size--;\n                // cc.info(\"ui_pool:pool capacity is max, destroy old ui,\", del_path);\n            }\n        }\n        let uis: cc.Node[] = this.cache[path];\n        if (!uis) {\n            this.cache[path] = uis = [];\n        }\n        ui.removeFromParent(false);\n        uis.push(ui);\n        this.size++;\n        this.path2time[path] = cc.sys.now();\n    }\n\n    clear_atpath(path: string): void {\n        let uis: cc.Node[] = this.cache[path];\n        if (!uis || uis.length <= 0) {\n            return;\n        }\n        while (uis.length > 0) {\n            let ui: cc.Node = uis.pop();\n            ui.destroy();\n            this.size--;\n        }\n    }\n\n    clear(): void {\n        for (let path in this.cache) {\n            this.clear_atpath(path);\n        }\n        this.cache = {};\n        this.path2time = {};\n        if (this.size != 0) {\n            cc.warn(\"size should be 0, but now is\", this.size);\n        }\n    }\n\n    dump() {\n        let str: string = \"********ui_pool dump********\";\n        for (let path in this.cache) {\n            str += \"\\n\" + path + \"\\n\";\n            this.cache[path].forEach((u: cc.Node): void => {\n                str += u.name + \",\";\n            });\n        }\n        cc.log(str);\n    }\n}"]}